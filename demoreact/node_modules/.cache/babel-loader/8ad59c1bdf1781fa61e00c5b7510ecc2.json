{"ast":null,"code":"var _jsxFileName = \"/Users/dude/Documents/workspace/POC/demoreact/src/components/DimList2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport CheckBoxRedux from \"./CheckBox2\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DimensionsListRedux(props) {\n  _s();\n\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [allChecked, setAllChecked] = useState(true);\n  useEffect(() => {\n    if (props.dims.length > 0) setDataLoaded(true);else setDataLoaded(false);\n  }, [props.dims]);\n\n  function handleAllChecked(event) {\n    let dims = [...props.dims];\n    dims.forEach(dim => dim.toRedux = event.target.checked);\n    props.updateDims(dims);\n    if (allChecked) setAllChecked(false);else setAllChecked(true);\n  }\n\n  function handleCheckChieldElement(event) {\n    let temp = true;\n    let dims = [...props.dims];\n    dims.forEach(dim => {\n      if (dim.value === event.target.value) {\n        dim.toRedux = event.target.checked;\n      }\n\n      if (!dim.toRedux) {\n        temp = false;\n      }\n    });\n    setAllChecked(temp);\n    props.updateDims(dims);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [dataLoaded ? /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"list-group-item text-secondary\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-check-input\",\n        checked: allChecked,\n        type: \"checkbox\",\n        value: \"checkedall\",\n        id: \"checkAll_r\",\n        onChange: handleAllChecked\n      }, \"checkall_r\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"checkAll_r\",\n        className: \"h-6\",\n        children: \"Seleziona tutto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 176\n      }, this)]\n    }, \"checkall_r\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 18\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group list-group-horizontal d-inline-flex flex-wrap flex-fill\",\n      children: props.dims.filter(dim => dim.isChecked && dim.isNumeric).map(dim => {\n        return /*#__PURE__*/_jsxDEV(CheckBoxRedux, {\n          handleCheckChieldElement: handleCheckChieldElement,\n          ...dim\n        }, dim.value + \"_r\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 33\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DimensionsListRedux, \"gI3i2aVhOrpSafkrT8ykZgsvegY=\");\n\n_c = DimensionsListRedux;\nDimensionsListRedux.propTypes = {\n  dims: PropTypes.array,\n  updateDims: PropTypes.func,\n  sender: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"DimensionsListRedux\");","map":{"version":3,"sources":["/Users/dude/Documents/workspace/POC/demoreact/src/components/DimList2.js"],"names":["React","useState","useEffect","CheckBoxRedux","PropTypes","DimensionsListRedux","props","dataLoaded","setDataLoaded","allChecked","setAllChecked","dims","length","handleAllChecked","event","forEach","dim","toRedux","target","checked","updateDims","handleCheckChieldElement","temp","value","filter","isChecked","isNumeric","map","propTypes","array","func","sender","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport CheckBoxRedux from \"./CheckBox2\";\nimport PropTypes from 'prop-types';\n\nexport default function DimensionsListRedux( props ){\n    const [dataLoaded, setDataLoaded] = useState(false);\n    const [allChecked, setAllChecked] = useState(true);\n    \n    useEffect( () => {\n        if(props.dims.length>0)\n            setDataLoaded(true);\n        else\n            setDataLoaded(false);\n    }, [props.dims]);\n\n    function handleAllChecked (event) {\n        let dims = [...props.dims];\n        dims.forEach(dim => dim.toRedux = event.target.checked);\n        props.updateDims(dims);\n        if(allChecked)\n            setAllChecked(false)\n        else\n            setAllChecked(true)\n    }    \n    function handleCheckChieldElement (event) {\n        let temp=true;\n        let dims = [...props.dims]\n        dims.forEach(dim => {\n            if (dim.value === event.target.value){\n                dim.toRedux =  event.target.checked;\n            }   \n            if (!dim.toRedux){\n                temp=false;\n            }\n        });\n        setAllChecked(temp);\n        props.updateDims(dims);\n    }\n    return(\n        <div>\n            {dataLoaded ? \n                (<li className=\"list-group-item text-secondary\" key=\"checkall_r\">\n                    <input className=\"form-check-input\" key=\"checkall_r\" checked={allChecked} type=\"checkbox\" value=\"checkedall\" id=\"checkAll_r\" onChange={handleAllChecked} /><label htmlFor=\"checkAll_r\" className=\"h-6\">Seleziona tutto</label> \n                </li> ) : (null)\n            }\n            <ul className=\"list-group list-group-horizontal d-inline-flex flex-wrap flex-fill\">\n                {\n                    props.dims.filter(dim => dim.isChecked && dim.isNumeric).map((dim)=>{\n                        return (<CheckBoxRedux key={dim.value+\"_r\"} handleCheckChieldElement={handleCheckChieldElement} {...dim} />)\n                    })\n                }\n            </ul>\n        </div>\n    );\n}\n\nDimensionsListRedux.propTypes = {\n    dims : PropTypes.array,\n    updateDims : PropTypes.func,\n    sender: PropTypes.string\n}"]},"metadata":{},"sourceType":"module"}