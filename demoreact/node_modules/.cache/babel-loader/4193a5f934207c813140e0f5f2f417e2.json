{"ast":null,"code":"var _jsxFileName = \"/Users/dude/Documents/workspace/POC/demoreact/src/components/CsvReader.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSVReader } from 'react-papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyCSVReader(props) {\n  function handleOnDrop(data) {\n    //prendo il file ricevuto dal reader e preparo i data e le columns\n    let columns = data.shift().data,\n        parsedData = [];\n    data.forEach(val => {\n      var line = new Object();\n\n      if (val.data != \"\") {\n        //controllo se il dato ha valori\n        for (let i = 0; i < val.data.length; i++) {\n          if (val.data[i] == \"\") line[columns[i]] = \"undefined\"; //se un campo é vuoto lo metto ad undefined\n          else line[columns[i]] = +val.data[i] ? +val.data[i] : val.data[i];\n        }\n\n        parsedData.push(line);\n      }\n    });\n    let dims = columns.map(tempDim => ({\n      \"value\": tempDim,\n      \"isChecked\": true,\n      \"toRedux\": true,\n      \"isRedux\": false,\n      \"isNumeric\": +parsedData[0][tempDim] ? true : false\n    }));\n    props.onChange(parsedData, dims);\n  }\n\n  function handleOnError(err)\n  /*file, inputElem, reason*/\n  {\n    console.log(err);\n  }\n\n  function handleOnRemoveFile(data) {\n    props.onChange(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CSVReader, {\n    onDrop: handleOnDrop,\n    onError: handleOnError,\n    addRemoveButton: true,\n    removeButtonColor: \"#ff0000\",\n    onRemoveFile: handleOnRemoveFile,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Drop CSV file here or click to upload.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n}\n_c = MyCSVReader;\nMyCSVReader.propTypes = {\n  onChange: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCSVReader\");","map":{"version":3,"sources":["/Users/dude/Documents/workspace/POC/demoreact/src/components/CsvReader.js"],"names":["React","PropTypes","CSVReader","MyCSVReader","props","handleOnDrop","data","columns","shift","parsedData","forEach","val","line","Object","i","length","push","dims","map","tempDim","onChange","handleOnError","err","console","log","handleOnRemoveFile","propTypes","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA,eAAe,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAC1C,WAASC,YAAT,CAAsBC,IAAtB,EAA2B;AACzB;AACA,QAAIC,OAAO,GAAGD,IAAI,CAACE,KAAL,GAAaF,IAA3B;AAAA,QAAiCG,UAAU,GAAG,EAA9C;AACAH,IAAAA,IAAI,CAACI,OAAL,CAAaC,GAAG,IAAG;AACjB,UAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;;AACA,UAAGF,GAAG,CAACL,IAAJ,IAAU,EAAb,EAAgB;AAAE;AAChB,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACL,IAAJ,CAASS,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAGH,GAAG,CAACL,IAAJ,CAASQ,CAAT,KAAa,EAAhB,EACEF,IAAI,CAACL,OAAO,CAACO,CAAD,CAAR,CAAJ,GAAmB,WAAnB,CADF,CACsC;AADtC,eAGEF,IAAI,CAACL,OAAO,CAACO,CAAD,CAAR,CAAJ,GAAoB,CAACH,GAAG,CAACL,IAAJ,CAASQ,CAAT,CAAF,GAAiB,CAACH,GAAG,CAACL,IAAJ,CAASQ,CAAT,CAAlB,GAAgCH,GAAG,CAACL,IAAJ,CAASQ,CAAT,CAAnD;AACH;;AACDL,QAAAA,UAAU,CAACO,IAAX,CAAgBJ,IAAhB;AACD;AACF,KAXD;AAYA,QAAIK,IAAI,GAAGV,OAAO,CAACW,GAAR,CAAaC,OAAD,KAAc;AAAC,eAASA,OAAV;AAAmB,mBAAa,IAAhC;AAAsC,iBAAW,IAAjD;AAAuD,iBAAW,KAAlE;AAAyE,mBAAc,CAACV,UAAU,CAAC,CAAD,CAAV,CAAcU,OAAd,CAAF,GAA4B,IAA5B,GAAmC;AAAzH,KAAd,CAAZ,CAAX;AACAf,IAAAA,KAAK,CAACgB,QAAN,CAAeX,UAAf,EAA2BQ,IAA3B;AACD;;AAED,WAASI,aAAT,CAAuBC,GAAvB;AAA4B;AAA4B;AACtDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,WAASG,kBAAT,CAA4BnB,IAA5B,EAAiC;AAC/BF,IAAAA,KAAK,CAACgB,QAAN,CAAed,IAAf;AACD;;AAEC,sBACE,QAAC,SAAD;AACE,IAAA,MAAM,EAAED,YADV;AAEE,IAAA,OAAO,EAAEgB,aAFX;AAGE,IAAA,eAAe,MAHjB;AAIE,IAAA,iBAAiB,EAAC,SAJpB;AAKE,IAAA,YAAY,EAAEI,kBALhB;AAAA,2BAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAWH;KAvCuBtB,W;AAyCxBA,WAAW,CAACuB,SAAZ,GAAwB;AACtBN,EAAAA,QAAQ,EAAGnB,SAAS,CAAC0B;AADC,CAAxB","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nimport { CSVReader } from 'react-papaparse'\n\nexport default function MyCSVReader( props ){\n  function handleOnDrop(data){\n    //prendo il file ricevuto dal reader e preparo i data e le columns\n    let columns = data.shift().data, parsedData = [];\n    data.forEach(val =>{\n      var line = new Object();\n      if(val.data!=\"\"){ //controllo se il dato ha valori\n        for (let i = 0; i < val.data.length; i++) {\n          if(val.data[i]==\"\")\n            line[columns[i]] = \"undefined\";     //se un campo é vuoto lo metto ad undefined\n          else\n            line[columns[i]] = (+val.data[i]) ? +val.data[i] : val.data[i];\n        }\n        parsedData.push(line);\n      }\n    });\n    let dims = columns.map((tempDim) => ({\"value\": tempDim, \"isChecked\": true, \"toRedux\": true, \"isRedux\": false ,\"isNumeric\": (+parsedData[0][tempDim]) ? true : false}))\n    props.onChange(parsedData, dims);\n  }\n\n  function handleOnError(err, /*file, inputElem, reason*/){\n    console.log(err)\n  }\n\n  function handleOnRemoveFile(data){\n    props.onChange(data)\n  }\n\n    return (\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        addRemoveButton\n        removeButtonColor='#ff0000'\n        onRemoveFile={handleOnRemoveFile}\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    )\n}\n\nMyCSVReader.propTypes = {\n  onChange : PropTypes.func\n}"]},"metadata":{},"sourceType":"module"}